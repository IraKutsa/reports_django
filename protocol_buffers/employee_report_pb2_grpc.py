# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import employee_report_pb2 as employee__report__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class EmployeeReportServiceStub(object):
    """Service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateReport = channel.unary_unary(
                '/employee_report.EmployeeReportService/CreateReport',
                request_serializer=employee__report__pb2.Report.SerializeToString,
                response_deserializer=employee__report__pb2.Report.FromString,
                )
        self.GetReportById = channel.unary_unary(
                '/employee_report.EmployeeReportService/GetReportById',
                request_serializer=employee__report__pb2.GetReportByIdRequest.SerializeToString,
                response_deserializer=employee__report__pb2.Report.FromString,
                )
        self.GetReportsByUser = channel.unary_unary(
                '/employee_report.EmployeeReportService/GetReportsByUser',
                request_serializer=employee__report__pb2.GetReportsByUserRequest.SerializeToString,
                response_deserializer=employee__report__pb2.ReportsByUser.FromString,
                )
        self.GetReportsByProject = channel.unary_unary(
                '/employee_report.EmployeeReportService/GetReportsByProject',
                request_serializer=employee__report__pb2.GetReportsByProjectRequest.SerializeToString,
                response_deserializer=employee__report__pb2.ReportsByProject.FromString,
                )
        self.EditReport = channel.unary_unary(
                '/employee_report.EmployeeReportService/EditReport',
                request_serializer=employee__report__pb2.EditReportRequest.SerializeToString,
                response_deserializer=employee__report__pb2.Report.FromString,
                )
        self.DeleteReportById = channel.unary_unary(
                '/employee_report.EmployeeReportService/DeleteReportById',
                request_serializer=employee__report__pb2.DeleteReportByIdRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class EmployeeReportServiceServicer(object):
    """Service definition
    """

    def CreateReport(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetReportById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetReportsByUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetReportsByProject(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EditReport(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteReportById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EmployeeReportServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateReport': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateReport,
                    request_deserializer=employee__report__pb2.Report.FromString,
                    response_serializer=employee__report__pb2.Report.SerializeToString,
            ),
            'GetReportById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetReportById,
                    request_deserializer=employee__report__pb2.GetReportByIdRequest.FromString,
                    response_serializer=employee__report__pb2.Report.SerializeToString,
            ),
            'GetReportsByUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetReportsByUser,
                    request_deserializer=employee__report__pb2.GetReportsByUserRequest.FromString,
                    response_serializer=employee__report__pb2.ReportsByUser.SerializeToString,
            ),
            'GetReportsByProject': grpc.unary_unary_rpc_method_handler(
                    servicer.GetReportsByProject,
                    request_deserializer=employee__report__pb2.GetReportsByProjectRequest.FromString,
                    response_serializer=employee__report__pb2.ReportsByProject.SerializeToString,
            ),
            'EditReport': grpc.unary_unary_rpc_method_handler(
                    servicer.EditReport,
                    request_deserializer=employee__report__pb2.EditReportRequest.FromString,
                    response_serializer=employee__report__pb2.Report.SerializeToString,
            ),
            'DeleteReportById': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteReportById,
                    request_deserializer=employee__report__pb2.DeleteReportByIdRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'employee_report.EmployeeReportService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EmployeeReportService(object):
    """Service definition
    """

    @staticmethod
    def CreateReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/employee_report.EmployeeReportService/CreateReport',
            employee__report__pb2.Report.SerializeToString,
            employee__report__pb2.Report.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetReportById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/employee_report.EmployeeReportService/GetReportById',
            employee__report__pb2.GetReportByIdRequest.SerializeToString,
            employee__report__pb2.Report.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetReportsByUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/employee_report.EmployeeReportService/GetReportsByUser',
            employee__report__pb2.GetReportsByUserRequest.SerializeToString,
            employee__report__pb2.ReportsByUser.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetReportsByProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/employee_report.EmployeeReportService/GetReportsByProject',
            employee__report__pb2.GetReportsByProjectRequest.SerializeToString,
            employee__report__pb2.ReportsByProject.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EditReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/employee_report.EmployeeReportService/EditReport',
            employee__report__pb2.EditReportRequest.SerializeToString,
            employee__report__pb2.Report.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteReportById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/employee_report.EmployeeReportService/DeleteReportById',
            employee__report__pb2.DeleteReportByIdRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
